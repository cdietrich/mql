import org.xtext.example.mydsl.myDsl.MyDslPackage$Literals
import java.util.List
import org.eclipse.xtext.resource.IEObjectDescription
import org.eclipse.emf.ecore.util.EcoreUtil
import org.xtext.example.mydsl.myDsl.Entity
import org.xtext.example.mydsl.myDsl.Attribute
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EClass
import demo.DemoFactory

def <T> Iterable<T> alle(org.eclipse.emf.ecore.EClass typ) {
	val List<IEObjectDescription> eiods = index.getExportedObjectsByType(typ).toList	
	val alle = eiods.map(g|EcoreUtil::resolve(g.EObjectOrProxy, resourceSet) as T)
	alle
}


def Iterable<Entity> alleEntities() {
	<Entity>alle(MyDslPackage$Literals::ENTITY)
}

def upper(String s) {
	s.toUpperCase
}

"xxxx".upper

project.name

val fac = DemoFactory.eINSTANCE
fac.createDemo

var alle2 = [EClass typ, Class<? extends EObject> typ2|
	val List<IEObjectDescription> eiods = index.getExportedObjectsByType(typ).toList	
	val a = eiods.map(g|EcoreUtil::resolve(g.EObjectOrProxy, resourceSet)).filter(typ2)
	a
]



val entities = alle2.apply(MyDslPackage$Literals::ENTITY, typeof(Entity)) as Iterable<Entity>
//val entities = alleEntities()
val entitiesWithoutName = entities.filter(e|e.features.filter(typeof(Attribute))
		.filter(a|a.name == 'name').size == 0
)
entitiesWithoutName.map(e|e.name).toList
